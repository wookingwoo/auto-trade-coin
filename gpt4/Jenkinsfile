pipeline {
    agent any
    environment {
        OPENAI_API_KEY = credentials('OPENAI_API_KEY')
        UPBIT_ACCESS_KEY = credentials('UPBIT_ACCESS_KEY')
        UPBIT_SECRET_KEY = credentials('UPBIT_SECRET_KEY')
        SERPAPI_API_KEY = credentials('SERPAPI_API_KEY')
        SLACK_BOT_TOKEN = credentials('SLACK_BOT_TOKEN')
        SLACK_APP_TOKEN = credentials('SLACK_APP_TOKEN')
        SLACK_COINBOT_CHANNEL_NAME = credentials('SLACK_COINBOT_CHANNEL_NAME')
        GPT_MODEL = credentials('GPT_MODEL')
    }
    stages {
         stage('Print Workspace') {
                steps {
                    script {
                        echo "Workspace: ${env.WORKSPACE}"
                    }
                }
            }
        stage('Checkout') {
            steps {
                // Git에서 소스 코드 체크아웃
                checkout scm
            }
        }
        stage('Build and Deploy') {
            steps {
                script {
                    dir('gpt4') {
                        // Docker Compose를 사용하여 이미지 빌드 및 서비스 배포
                        withEnv([
                            "OPENAI_API_KEY=${env.OPENAI_API_KEY}",
                            "UPBIT_ACCESS_KEY=${env.UPBIT_ACCESS_KEY}",
                            "UPBIT_SECRET_KEY=${env.UPBIT_SECRET_KEY}",
                            "SERPAPI_API_KEY=${env.SERPAPI_API_KEY}",
                            "SLACK_BOT_TOKEN=${env.SLACK_BOT_TOKEN}",
                            "SLACK_APP_TOKEN=${env.SLACK_APP_TOKEN}",
                            "SLACK_COINBOT_CHANNEL_NAME=${env.SLACK_COINBOT_CHANNEL_NAME}",
                            "GPT_MODEL=${env.GPT_MODEL}"
                        ]) {
                            sh 'docker compose up --build -d'
                        }
                    }
                }
            }
        }
    }
// post {
//     always {
//         // 파이프라인의 모든 단계가 완료된 후 실행, Docker Compose를 사용하여 생성된 서비스 정리
//         script {
//             sh 'docker-compose down'
//         }
//     }
// }
}
